openapi: 3.0.0
info:
  title: Library API
  description: A demo api for library app.
  version: 0.0.1

paths:
  /api/book:
    summary: All library books
    description: This resource returns all library books or creates a new one.

    get:
      tags:
        - Book
      summary: Gets all books registred in the system.
      responses:
        200:
          description: Succesfull operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/book_with_id'
    post:
      tags:
        - Book
      summary: Create a book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/book'
      responses:
        200:
          $ref: '#/components/responses/resource_id'
        403:
          description: Validation error
  /api/book/{book_id}:
    summary: Represents a book
    description: This resource represents a book in the library.

    get:
      tags:
        - Book
      summary: Return single book by id.
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Succesfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book_with_id'
        404:
          description: Resource not found
        403:
          description: Validation error
    put:
      tags:
        - Book
      summary: Update book
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/book'
      responses:
        204 :
          description: Succesfull operation
        404:
          description: Resource not found
        403:
          description: Validation error
    delete:
      tags:
        - Book
      summary: Remove book by id.
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: integer
      responses:
        204 :
          description: Succesfull operation
        404:
          description: Resource not found
        403:
          description: Validation error

  /api/user:
    summary: Represents all users
    description: This resource represents all users or create a new one.

    get:
      tags:
        - User
      summary: Gets all users registred in the system.
      responses:
        200:
          description: Succesfull operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user_with_id'
    post:
      tags:
        - User
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_with_pwd'
      responses:
        200:
          $ref: '#/components/responses/resource_id'
        403:
          description: Validation error
  /api/user/{user_id}:
    summary: Represents a user
    description: This resource represents a user in the system.

    get:
      tags:
        - User
      summary: Return single user by id.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Succesfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_with_id'
        404:
          description: Resource not found
        403:
          description: Validation error
    put:
      tags:
        - User
      summary: Update user
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        204 :
          description: Succesfull operation
        404:
          description: Resource not found
        403:
          description: Validation error
    delete:
      tags:
        - User
      summary: Remove user by id.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        204 :
          description: Succesfull operation
        404:
          description: Resource not found
        403:
          description: Validation error

  /api/user/{user_id}/orders/:
    summary: Represents orders for one user
    description: This resource represents orders made by a user.

    get:
      tags:
        - Order
      summary: Get orders made by user.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Succesfull operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/order_with_id'
    post:
      tags:
        - Order
      summary: Create a order for user.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order'
      responses:
        200:
          $ref: '#/components/responses/resource_id'
        403:
          description: Validation error
  /api/user/{user_id}/orders/{order_id}:
    summary: One order made by user
    description: This resource represents one particular order made by user.

    get:
      tags:
        - Order
      summary: Return single order for user by id.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - in: path
          name: order_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Succesfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order_with_id'
        404:
          description: Resource not found
        403:
          description: Validation error
    put:
      tags:
        - Order
      summary: Update order
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - in: path
          name: order_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order'
      responses:
        204 :
          description: Succesfull operation
        404:
          description: Resource not found
        403:
          description: Validation error
    delete:
      tags:
        - Order
      summary: Remove order for user by id.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - in: path
          name: order_id
          required: true
          schema:
            type: integer
      responses:
        204 :
          description: Succesfull operation
        404:
          description: Resource not found
        403:
          description: Validation error

components:
  schemas:
    book:
      type: object
      properties:
        title:
          type: string
        author_name:
          type: string
        author_surname:
          type: string
        publisher:
          type: string
        year_published:
          type: string
          format: date
        amount:
          type: integer
      required:
        - title
        - author_name
        - author_surname
        - publisher
        - year_published
        - amount
    book_with_id:
      allOf:     # Combines the BasicErrorModel and the inline model
        - $ref: '#/components/schemas/book'
        - type: object
          properties:
            book_id:
              type: integer
              format: int64
          required:
            - id

    user:
      type: "object"
      properties:
        username:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
      required:
        - username
        - firstName
        - lastName
        - email
    user_with_id:
      allOf:
        - $ref: '#/components/schemas/user'
        - type: object
          properties:
            user_id:
              type: "integer"
              format: "int64"
          required:
            - user_id
    user_with_pwd:
      allOf:
        - $ref: '#/components/schemas/user'
        - type: object
          properties:
            password:
              type: "string"
          required:
            - password

    order:
      type: "object"
      properties:
        book_id:
          type: "integer"
          format: "int64"
        return_date:
          type: "string"
          format: "date"
        status:
          type: "string"
          description: "Order Status"
          enum:
            - "active"
            - "returned"
      required:
        - book_id
        - return_date
        - status

    order_with_id:
      allOf:
        - $ref: '#/components/schemas/order'
        - type: object
          properties:
            order_id:
              type: integer
              format: int64
          required:
            - order_id
  responses:
    resource_id:
      description: Succesfull operation
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                description: Resource ID.